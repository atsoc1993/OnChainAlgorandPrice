{
    "hints": {
        "callGetScaledAlgoPrice()uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getTargetUSDCAmountInAlgo(uint64)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBnZXRBbGdvUHJpY2VDb250cmFjdC5nZXRBbGdvUHJpY2VDb250cmFjdC5fX2FsZ29weV9lbnRyeXBvaW50X3dpdGhfaW5pdCgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgMTAwMDAwMAogICAgYnl0ZWNibG9jayAidXNkY19wb29sX2FkZHJlc3MiICJ0aW55bWFuX3JvdXRlciIgMHgxNTFmN2M3NSAweDYxNzM3MzY1NzQ1ZjMxNWY3MjY1NzM2NTcyNzY2NTczIDB4NjE3MzczNjU3NDVmMzI1ZjcyNjU3MzY1NzI3NjY1NzMKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjcKICAgIC8vIHNlbGYudXNkY19wb29sX2FkZHJlc3MgPSBBY2NvdW50KCdVREZXVDVEVzNYNVJaUVlYS1FFTVo2TVJXQUVZSFdZUDdZVUFQWktQVzZXSkszSkgzT1pQTDdQTzJZJykKICAgIGJ5dGVjXzAgLy8gInVzZGNfcG9vbF9hZGRyZXNzIgogICAgcHVzaGJ5dGVzIGJhc2UzMihVREZXVDVEVzNYNVJaUVlYS1FFTVo2TVJXQUVZSFdZUDdZVUFQWktQVzZXSkszSkgzT1pBKSAvLyBhZGRyIFVERldUNURXM1g1UlpRWVhLUUVNWjZNUldBRVlIV1lQN1lVQVBaS1BXNldKSzNKSDNPWlBMN1BPMlkKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBnZXRBbGdvUHJpY2VDb250cmFjdC5weTo4CiAgICAvLyBzZWxmLnRpbnltYW5fcm91dGVyID0gQXBwbGljYXRpb24oMTQ4NjA3MDAwKQogICAgYnl0ZWNfMSAvLyAidGlueW1hbl9yb3V0ZXIiCiAgICBwdXNoaW50IDE0ODYwNzAwMCAvLyAxNDg2MDcwMDAKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIGdldEFsZ29QcmljZUNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdANwogICAgcHVzaGJ5dGVzcyAweGExZWJiMTY0IDB4YmI3NjVmMjQgLy8gbWV0aG9kICJjYWxsR2V0U2NhbGVkQWxnb1ByaWNlKCl1aW50NjQiLCBtZXRob2QgImdldFRhcmdldFVTRENBbW91bnRJbkFsZ28odWludDY0KXVpbnQ2NCIKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDAKICAgIG1hdGNoIG1haW5fY2FsbEdldFNjYWxlZEFsZ29QcmljZV9yb3V0ZUA1IG1haW5fZ2V0VGFyZ2V0VVNEQ0Ftb3VudEluQWxnb19yb3V0ZUA2CgptYWluX2FmdGVyX2lmX2Vsc2VAOToKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIGdldEFsZ29QcmljZUNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2dldFRhcmdldFVTRENBbW91bnRJbkFsZ29fcm91dGVANjoKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjM2CiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIGdldEFsZ29QcmljZUNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICAvLyBnZXRBbGdvUHJpY2VDb250cmFjdC5weTozNgogICAgLy8gQGFiaW1ldGhvZAogICAgY2FsbHN1YiBnZXRUYXJnZXRVU0RDQW1vdW50SW5BbGdvCiAgICBpdG9iCiAgICBieXRlY18yIC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NhbGxHZXRTY2FsZWRBbGdvUHJpY2Vfcm91dGVANToKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjEwCiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIGNhbGxzdWIgY2FsbEdldFNjYWxlZEFsZ29QcmljZQogICAgaXRvYgogICAgYnl0ZWNfMiAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANzoKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjUKICAgIC8vIGNsYXNzIGdldEFsZ29QcmljZUNvbnRyYWN0KEFSQzRDb250cmFjdCk6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDkKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gZ2V0QWxnb1ByaWNlQ29udHJhY3QuZ2V0QWxnb1ByaWNlQ29udHJhY3QuY2FsbEdldFNjYWxlZEFsZ29QcmljZSgpIC0+IHVpbnQ2NDoKY2FsbEdldFNjYWxlZEFsZ29QcmljZToKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjEwLTEzCiAgICAvLyBAYWJpbWV0aG9kCiAgICAvLyBkZWYgY2FsbEdldFNjYWxlZEFsZ29QcmljZSgKICAgIC8vICAgICBzZWxmCiAgICAvLyApIC0+IFVJbnQ2NDoKICAgIHByb3RvIDAgMQogICAgLy8gZ2V0QWxnb1ByaWNlQ29udHJhY3QucHk6MTUKICAgIC8vIFVTRENfcmVzZXJ2ZSA9IG9wLkFwcExvY2FsLmdldF9leF91aW50NjQoc2VsZi51c2RjX3Bvb2xfYWRkcmVzcywgc2VsZi50aW55bWFuX3JvdXRlciwgYidhc3NldF8xX3Jlc2VydmVzJylbMF0KICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ1c2RjX3Bvb2xfYWRkcmVzcyIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi51c2RjX3Bvb2xfYWRkcmVzcyBleGlzdHMKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJ0aW55bWFuX3JvdXRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aW55bWFuX3JvdXRlciBleGlzdHMKICAgIGJ5dGVjXzMgLy8gMHg2MTczNzM2NTc0NWYzMTVmNzI2NTczNjU3Mjc2NjU3MwogICAgYXBwX2xvY2FsX2dldF9leAogICAgcG9wCiAgICAvLyBnZXRBbGdvUHJpY2VDb250cmFjdC5weToxNgogICAgLy8gQUxHT19yZXNlcnZlID0gb3AuQXBwTG9jYWwuZ2V0X2V4X3VpbnQ2NChzZWxmLnVzZGNfcG9vbF9hZGRyZXNzLCBzZWxmLnRpbnltYW5fcm91dGVyLCBiJ2Fzc2V0XzJfcmVzZXJ2ZXMnKVswXQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInVzZGNfcG9vbF9hZGRyZXNzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZGNfcG9vbF9hZGRyZXNzIGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInRpbnltYW5fcm91dGVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRpbnltYW5fcm91dGVyIGV4aXN0cwogICAgYnl0ZWMgNCAvLyAweDYxNzM3MzY1NzQ1ZjMyNWY3MjY1NzM2NTcyNzY2NTczCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBwb3AKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjIwCiAgICAvLyByZXR1cm4gVVNEQ19yZXNlcnZlICogU0NBTEVfRkFDVE9SIC8vIEFMR09fcmVzZXJ2ZQogICAgc3dhcAogICAgLy8gZ2V0QWxnb1ByaWNlQ29udHJhY3QucHk6MTgKICAgIC8vIFNDQUxFX0ZBQ1RPUiA9IFVJbnQ2NCgxXzAwMF8wMDApCiAgICBpbnRjXzIgLy8gMTAwMDAwMAogICAgLy8gZ2V0QWxnb1ByaWNlQ29udHJhY3QucHk6MjAKICAgIC8vIHJldHVybiBVU0RDX3Jlc2VydmUgKiBTQ0FMRV9GQUNUT1IgLy8gQUxHT19yZXNlcnZlCiAgICAqCiAgICBzd2FwCiAgICAvCiAgICByZXRzdWIKCgovLyBnZXRBbGdvUHJpY2VDb250cmFjdC5nZXRBbGdvUHJpY2VDb250cmFjdC5nZXRUYXJnZXRVU0RDQW1vdW50SW5BbGdvKHRhcmdldF91c2RjOiB1aW50NjQpIC0+IHVpbnQ2NDoKZ2V0VGFyZ2V0VVNEQ0Ftb3VudEluQWxnbzoKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjM2LTQwCiAgICAvLyBAYWJpbWV0aG9kCiAgICAvLyBkZWYgZ2V0VGFyZ2V0VVNEQ0Ftb3VudEluQWxnbygKICAgIC8vICAgICBzZWxmLAogICAgLy8gICAgIHRhcmdldF91c2RjOiBVSW50NjQKICAgIC8vICkgLT4gVUludDY0OgogICAgcHJvdG8gMSAxCiAgICAvLyBnZXRBbGdvUHJpY2VDb250cmFjdC5weToyOAogICAgLy8gVVNEQ19yZXNlcnZlID0gb3AuQXBwTG9jYWwuZ2V0X2V4X3VpbnQ2NChzZWxmLnVzZGNfcG9vbF9hZGRyZXNzLCBzZWxmLnRpbnltYW5fcm91dGVyLCBiJ2Fzc2V0XzFfcmVzZXJ2ZXMnKVswXQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInVzZGNfcG9vbF9hZGRyZXNzIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZGNfcG9vbF9hZGRyZXNzIGV4aXN0cwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInRpbnltYW5fcm91dGVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRpbnltYW5fcm91dGVyIGV4aXN0cwogICAgYnl0ZWNfMyAvLyAweDYxNzM3MzY1NzQ1ZjMxNWY3MjY1NzM2NTcyNzY2NTczCiAgICBhcHBfbG9jYWxfZ2V0X2V4CiAgICBwb3AKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjI5CiAgICAvLyBBTEdPX3Jlc2VydmUgPSBvcC5BcHBMb2NhbC5nZXRfZXhfdWludDY0KHNlbGYudXNkY19wb29sX2FkZHJlc3MsIHNlbGYudGlueW1hbl9yb3V0ZXIsIGInYXNzZXRfMl9yZXNlcnZlcycpWzBdCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAidXNkY19wb29sX2FkZHJlc3MiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNkY19wb29sX2FkZHJlc3MgZXhpc3RzCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAidGlueW1hbl9yb3V0ZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGlueW1hbl9yb3V0ZXIgZXhpc3RzCiAgICBieXRlYyA0IC8vIDB4NjE3MzczNjU3NDVmMzI1ZjcyNjU3MzY1NzI3NjY1NzMKICAgIGFwcF9sb2NhbF9nZXRfZXgKICAgIHBvcAogICAgLy8gZ2V0QWxnb1ByaWNlQ29udHJhY3QucHk6MzMKICAgIC8vIHJldHVybiBVU0RDX3Jlc2VydmUgKiBTQ0FMRV9GQUNUT1IgLy8gQUxHT19yZXNlcnZlCiAgICBzd2FwCiAgICAvLyBnZXRBbGdvUHJpY2VDb250cmFjdC5weTozMQogICAgLy8gU0NBTEVfRkFDVE9SID0gVUludDY0KDEwXzAwMCkKICAgIHB1c2hpbnQgMTAwMDAgLy8gMTAwMDAKICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjMzCiAgICAvLyByZXR1cm4gVVNEQ19yZXNlcnZlICogU0NBTEVfRkFDVE9SIC8vIEFMR09fcmVzZXJ2ZQogICAgKgogICAgc3dhcAogICAgLwogICAgLy8gZ2V0QWxnb1ByaWNlQ29udHJhY3QucHk6NDYKICAgIC8vIGFtb3VudF9pbl9hbGdvID0gdGFyZ2V0X3VzZGMgKiBTQ0FMRV9GQUNUT1IgLy8gc2NhbGVkX2FsZ29fcHJpY2UKICAgIGZyYW1lX2RpZyAtMQogICAgLy8gZ2V0QWxnb1ByaWNlQ29udHJhY3QucHk6NDQKICAgIC8vIFNDQUxFX0ZBQ1RPUiA9IFVJbnQ2NCgxXzAwMF8wMDApCiAgICBpbnRjXzIgLy8gMTAwMDAwMAogICAgLy8gZ2V0QWxnb1ByaWNlQ29udHJhY3QucHk6NDYKICAgIC8vIGFtb3VudF9pbl9hbGdvID0gdGFyZ2V0X3VzZGMgKiBTQ0FMRV9GQUNUT1IgLy8gc2NhbGVkX2FsZ29fcHJpY2UKICAgICoKICAgIHN3YXAKICAgIC8KICAgIC8vIGdldEFsZ29QcmljZUNvbnRyYWN0LnB5OjQ4CiAgICAvLyByZXR1cm4gYW1vdW50X2luX2FsZ28KICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "state": {
        "global": {
            "num_byte_slices": 1,
            "num_uints": 1
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "tinyman_router": {
                    "type": "uint64",
                    "key": "tinyman_router"
                },
                "usdc_pool_address": {
                    "type": "bytes",
                    "key": "usdc_pool_address"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "getAlgoPriceContract",
        "methods": [
            {
                "name": "callGetScaledAlgoPrice",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getTargetUSDCAmountInAlgo",
                "args": [
                    {
                        "type": "uint64",
                        "name": "target_usdc"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}